---
  # /*---------------------------------------------------------------------------8
  # |                                                                            |
  # |               This pipeline updates the ADO repository                     |
  # |                                                                            |
  # +------------------------------------4--------------------------------------*/

  name:                                  Update Azure DevOps repositories from GitHub $(branch) branch

  parameters:
    - name:                              repository
      displayName:                       Source repository
      type:                              string
      default:                           https://github.com/Azure/sap-automation.git

    - name:                              sample_repository
      displayName:                       Sample source repository
      type:                              string
      default:                           https://github.com/Azure/SAP-automation-samples.git

    - name:                              branch
      displayName:                       Source branch to update from
      type:                              string
      default:                           main

    - name:                              tag
      displayName:                       Git tag to fetch
      type:                              string
      default:                           latest

    - name:                              force
      displayName:                       Force the update
      type:                              boolean
      default:                           false

  trigger:                               none

  pool:
    vmImage:                             ubuntu-latest

  variables:
    - name:                              repository
      value:                             ${{ parameters.repository }}
    - name:                              sample_repository
      value:                             ${{ parameters.sample_repository }}
    - name:                              branch
      value:                             ${{ parameters.branch }}
    - name:                              tag
      value:                             ${{ parameters.tag }}
    - name:                              force
      value:                             ${{ parameters.force }}
    - name:                              log
      value:                             logfile_$(Build.BuildId)

  resources:
    repositories:
      - repository: sap-automation
        type: git
        name: sap-automation
        ref: refs/heads/main
      - repository: samples
        type: git
        name: sap-samples
        ref: refs/heads/main

  stages:
    - stage:                             Update_ADO_repository
      displayName:                       Update code repository from GitHub $(branch) branch
      jobs:
        - job:                           Update_ADO_repository
          displayName:                   Update code repository
          steps:
            - checkout:                  sap-automation
              fetchDepth: 0
              persistCredentials:        true
            - bash: |
                #!/bin/bash
                green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"

                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                git config --global pull.ff false
                git config --global pull.rebase false
                git config --global checkout.defaultRemote origin

                git remote add remote-repo $(repository)

                git fetch --all --tags  >> /tmp/$(log) 2>&1

                git checkout -q $(branch)

                git pull -q  remote-repo $(branch) >> /tmp/$(log) 2>&1
                return_code=$?
                git status

                cat /tmp/$(log)

                grep CONFLICT /tmp/$(log) | while read -r conflict ; do
                  echo $conflict
                  echo "##vso[task.logissue type=error]$conflict"
                done

                if [[ "$(force)" == "True" ]]; then
                  echo "running git push to ADO with force option"
                  if ! git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push --force origin HEAD:$(branch)
                  then
                     echo -e "$red--- Failed to push ---$reset"
                     exit 1
                  fi
                else
                  echo "running git push to ADO"
                  if ! git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                  then
                     echo -e "$red--- Failed to push ---$reset"
                     exit 1
                  fi

                fi
                # If Pull already failed then keep that error code
                if [ 0 != $return_code ]; then
                  return_code=$?
                fi

                exit $return_code

              displayName:               Update code repository
              env:
                SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              failOnStderr:              false

    - stage:                             Update_ADO_Sample_repository
      displayName:                       Update sample repository from GitHub $(branch) branch
      jobs:
        - job:                           Update_ADO_Sample_repository
          displayName:                   Update sample repository
          steps:
            - checkout:                  samples
              fetchDepth: 0
              persistCredentials:        true
            - bash: |
                #!/bin/bash
                green="\e[1;32m" ; reset="\e[0m" ; boldred="\e[1;31m"

                git config --global user.email "$(Build.RequestedForEmail)"
                git config --global user.name "$(Build.RequestedFor)"
                git config --global pull.ff false
                git config --global pull.rebase false
                git config --global checkout.defaultRemote origin

                git remote add remote-repo $(sample_repository)

                git checkout -q main

                git pull -q  remote-repo main >> /tmp/$(log) 2>&1
                return_code=$?
                git status

                cat /tmp/$(log)

                grep CONFLICT /tmp/$(log) | while read -r conflict ; do
                  echo $conflict
                  echo "##vso[task.logissue type=error]$conflict"
                done

                if [[ "$(force)" == "True" ]]; then
                  echo "running git push to ADO with force option"
                  if ! git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push --force origin HEAD:$(branch)
                  then
                     echo -e "$red--- Failed to push ---$reset"
                     exit 1
                  fi
                else
                  echo "running git push to ADO"
                  if ! git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push
                  then
                     echo -e "$red--- Failed to push ---$reset"
                     exit 1
                  fi

                fi
                # If Pull already failed then keep that error code
                if [ 0 != $return_code ]; then
                  return_code=$?
                fi

                exit $return_code

              displayName:               Update sample repository
              env:
                SYSTEM_ACCESSTOKEN:      $(System.AccessToken)
              failOnStderr:              false

...

